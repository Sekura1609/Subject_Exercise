#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void ReadNum(int[][6], char[][30], int *, int *);
void PutNum(int[][6], char[][30], int n, int m);
void Cal_Score(int[][6], int n, int m);
void Cal_Score1(int[][6], char[][30], int n, int m);
int Up(int a, int b);
int Down(int a, int b);
void Rand1(int[][6], char[][30], int (*compire)(int a, int b), int n, int m);
void Rand_Name(char[][30], int[][6], int n, int m);
void Rand_ID(char[][30], int[][6], int n, int m);
void Search1(char[], int[][6], char[][30], int n, int m);
void Search2(char[], int[][6], char[][30], int n, int m);
void FactA(char[][30], char[][30], int[][6], int n, int m);
/*-------------------------------------------------------------------------------------*/
/*各函数功能如下：
  ReadNum:录入每个学生的学号、姓名和各科考试成绩
  PutNum:输出每个学生的学号、姓名、各科考试成绩、总分、平均分（按输入顺序输出)
  Cal_Score:计算每门课程的总分和平均分
  Cal_Score1:计算每个学生的总分和平均分
  Rand1:按每个学生的总分排出名次表   Up:a>b（升序）   Down:a<b（降序）
  Rand_Name:按姓名的字典顺序排出成绩表  Rand_ID:按学号由小到大排出成绩表
  Search1:按学号查询学生排名及其各科考试成绩    Search2:按姓名查询学生排名及其各科考试成绩
  FactA:将字符串数组排序并输出相应的成绩*/
/*-------------------------------------------------------------------------------------*/
int main(void)
{
    int choose, N;
    static int n, m;
    int Score[30][6];
    char ID[30][30];
    char Search_Name[30], Search_ID[4];
    int flag;
    int num1, num2, num3, num4, num5, i, j;
    float percent1, percent2, percent3, percent4, percent5;
    char c;
    /*--------------------------------------------------*/
    /*choose:选择功能x      n:人数减一      N:输入人数
      Seach_ID:要寻找的ID   Score_Name:要寻找的名字   Score:储存成绩  ID:储存学号
      sum:总分              aver:平均分    flag:设定标志
      num1~5:5类成绩学生数      percent1~5:5类成绩学生比例*/
    /*--------------------------------------------------*/
    flag = 0;
    memset(Score, 0, sizeof(Score));
    memset(ID, 0, sizeof(ID));
    printf("ID:200110704 徐明宇\nSubject7\n");
    printf("学生成绩管理系统3.0\n");
    printf("1. Input record\n2. List record\n3. Calculate total and average score of every course\n4. Calculate total and average score of every student\n5. Sort in descending order by total score of every student\n");
    printf("6. Sort in ascending order by total score of every student\n7. Sort in ascending order by StudentID\n8. Sort in dictionary order by name\n9. Search by StudentID\n10.Search by name\n11.Statistic analysis for every course\n0. Exit\n");
    while (1) //非错误输入形式或非主动退出则不退出程序
    {
        printf("Please Choose Function:");
        scanf("%d", &choose);
        switch (choose)
        {
        case 1:
            printf("学号为三位数\n");
            ReadNum(Score, ID, &n, &m);
            flag = 1; //当输入数据之后才能进行后续功能
            break;
        case 2:
            if (flag == 1)
            {
                PutNum(Score, ID, n, m);
            }
            else
                printf("Please begin from 1.\n"); //未进行操作1，则给予提示
            break;
        case 3:
            if (flag == 1)
                Cal_Score(Score, n, m);
            else
                printf("Please begin from 1.\n");
            break;
        case 4:
            if (flag == 1)
                Cal_Score1(Score, ID, n, m);
            else
                printf("Please begin from 1.\n");
            break;
        case 5:
            if (flag == 1)
            {
                Rand1(Score, ID, Up, n, m);
            }
            else
                printf("Please begin from 1.\n");
            break;
        case 6:
            if (flag == 1)
            {
                Rand1(Score, ID, Down, n, m);
            }
            else
                printf("Please begin from 1.\n");
            break;
        case 7:
            if (flag == 1)
            {
                Rand_ID(ID, Score, n, m);
            }
            else
                printf("Please begin from 1.\n");
            break;
        case 8:
            if (flag == 1)
            {
                Rand_Name(ID, Score, n, m);
            }
            else
                printf("Please begin from 1.\n");
            break;
        case 9:
            if (flag == 1)
            {
                printf("Please Input ID:\n");
                scanf("%s", Search_ID); //输入要查找成绩的ID
                Search1(Search_ID, Score, ID, n, m);
            }
            else
                printf("Please begin from 1.\n");
            break;
        case 10:
            if (flag == 1)
            {
                printf("Please Input Name:\n");
                scanf("%s", Search_Name); //输入要查找成绩的姓名
                Search2(Search_Name, Score, ID, n, m);
            }
            else
                printf("Please begin from 1.\n");
            break;
//按优秀（90-100分）、良好（80-89分）、中等（70-79分）、及格（60 -69分）、不及格(0-59分)5个类别，对每门课程分别统计每个类别的人数以及所占的百分比
        case 11:
            if (flag == 1)
            {
                for (j = 0; j <= m; j++)
                {
                    num1 = num2 = num3 = num4 = num5 = percent1 = percent2 = percent3 = percent4 = percent5 = 0;
                    for (i = 0; i <= n; i++)
                    {
                        if (Score[i][j] >= 0 && Score[i][j] <= 59)
                            num1++;
                        else if (Score[i][j] >= 60 && Score[i][j] <= 69)
                            num2++;
                        else if (Score[i][j] >= 70 && Score[i][j] <= 79)
                            num3++;
                        else if (Score[i][j] >= 80 && Score[i][j] <= 89)
                            num4++;
                        else
                            num5++;
                    }
                    N = n + 1;
                    percent1 = (float)num1 / N * 100;
                    percent2 = (float)num2 / N * 100;
                    percent3 = (float)num3 / N * 100;
                    percent4 = (float)num4 / N * 100;
                    percent5 = (float)num5 / N * 100;
                    printf("Subject %d.\n", j+1);
                    printf("优秀人数为%d\t所占百分比为%.2f%%\n", num5, percent5);
                    printf("良好人数为%d\t所占百分比为%.2f%%\n", num4, percent4);
                    printf("中等人数为%d\t所占百分比为%.2f%%\n", num3, percent3);
                    printf("及格人数为%d\t所占百分比为%.2f%%\n", num2, percent2);
                    printf("不及格人数为%d\t所占百分比为%.2f%%\n", num1, percent1);
                    putchar('\n');
                }
            }
            else
                printf("Please begin from 1.");
            break;
        case 0:
            printf("If you make sure to exit,please input ENTER\n");
            getchar();
            if ((c = getchar()) == '\n')
            {
                return 0;
                break;
            }
            else
                break;
        default: //输入非0~8的数字则退出
            return 0;
            break;
        }
    }
}

//输入数据
void ReadNum(int Score[][6], char ID[30][30], int *ip, int *iq)
{
    int n, m;
    printf("Input ID And Name And ENTER(no more than 30 students)\n");
    for (n = 0; n < 30; n++)
    {
        scanf("%s", &ID[n]);
        if (getchar() == '\n') //回车 停止输入
        {
            fflush(stdin); //清空缓冲区的回车
            break;
        }
    }
    printf("Input SCORE And ENTER(no more than 30 students)\n(请先输入空格，而后输入成绩)\n");
    for (n = 0; n < 30; n++)
    {
        for (m = 0; m < 6; m++)
        {
            scanf(" %d", &Score[n][m]);             //数据前有空格，防止上一次输入的回车将下一个数据覆盖
            char c = getchar();
            if (c == '\n') //回车 停止输入
                break;
        }
        printf("If all students' scores are input,please ENTER,else keep input\n");
        printf("注意：请先输入空格而后输入成绩\n");
        if (getchar() == '\n')
            break;
    }
    *ip = n; //将指针指向n，确定实际人数
    *iq = m; //将指针指向m，确定实际学科数
}

//打印数据
void PutNum(int Score[][6], char ID[30][30], int n, int m)
{
    int i, j;
    int sum;
    float aver;
    aver = 0;
    for (i = 0; i <= n; i++)
    {
        sum = 0;
        printf("ID And Name is: %s\n", ID[i]);
        printf("Score : ");
        for (j = 0; j <= m; j++)                //一个学生一个学生的进行循环
        {
            printf("%d  ", Score[i][j]);        //打印一个学生的各科成绩
            sum += Score[i][j];                 //一个学生各科成绩累加求和
        }
        putchar('\n');
        aver = (float)sum / (m + 1);
        printf("Sum = %d\nAverage = %.2f\n", sum, aver);
    }
}

//计算每门课程的总成绩与平均成绩
void Cal_Score(int Score[][6], int n, int m)
{
    int sum, i, j;
    int count = 1;      //计数
    float aver;
    for (j = 0; j <= m; j++, count++) //累加取和
    {
        sum = 0;
        for (i = 0; i <= n; i++)
            sum += Score[i][j];
        aver = (float)sum / (n + 1); //强转为浮点数
        printf("Subject %d.\n", count);
        printf(" Summary = %d\naverage = %.2f\n", sum, aver);
    }
}

//计算每个学生的总成绩与平均成绩
void Cal_Score1(int Score[][6], char ID[30][30], int n, int m)
{
    int sum, i, j;
    float aver;
    for (i = 0; i <= n; i++)
    {
        sum = 0;
        for (j = 0; j <= m; j++)
            sum += Score[i][j];
        aver = (float)sum / (m + 1);
        printf("%s:\n", ID[i]);
        printf("Summary = %d\naverage = %.2f\n", sum, aver);
    }
}

//排出学生成绩表
void Rand1(int v[][6], char ID[30][30], int (*compire)(int a, int b), int n, int m)
{
    int v1[30], v2[30], i, j, temp, count, sum;
    count = 1;
    for (j = 0; j <= n; j++)
    {
        sum = 0;
        for (i = 0; i <= m; i++)
            sum += v[j][i];
        v2[j] = v1[j] = sum;            //储存每个学生的总分，并进行备份
    }
    for (i = 0; i < n; i++) //一个轮次一个轮次进行，冒泡排序
        for (j = 0; j < n; j++)
        {
            if ((*compire)(v1[j + 1], v1[j])) //相邻项交换
            {
                temp = v1[j + 1];
                v1[j + 1] = v1[j];
                v1[j] = temp;
            }
        }
    for (i = 0; i <= n; i++)            //排出成绩表并注明科目
        for (j = 0; j <= n; j++)        //排出一个学生的各科成绩
            if (v1[i] == v2[j])
            {
                printf("%d.", count);
                count++;
                puts(ID[j]);
                printf("%d\n", v2[j]);
            }
}

int Up(int a, int b)
{
    return a > b;
}

int Down(int a, int b)
{
    return a < b;
}

//输入学号查询相应成绩
void Search1(char a[4], int Score[][6], char ID[30][30], int n, int m)
{
    char ID1[n + 1][4], ID2[n + 1][4], temp[1][4];
    int nsum[n + 1], nsum1[n + 1];
    int i, j, find, k, sum, p;
    memset(ID1, '\0', sizeof(ID1));
    memset(ID2, '\0', sizeof(ID2));
    for (i = 0; i <= n; i++)            //计算每个学生的总成绩，并备份
    {
        sum = 0;
        for (j = 0; j <= m; j++)
            sum += Score[i][j];
        nsum1[i] = nsum[i] = sum;
    }

    for (i = 0; i <= n; i++)            //将总成绩进行选择排序
    {
        k = i;
        for (j = i; j <= n; j++)
            if (nsum[k] < nsum[j])
                k = j;
        if (k != i)
        {
            p = nsum[k];
            nsum[k] = nsum[i];
            nsum[i] = p;
        }
    }

    for (i = 0; i <= n; i++)
        strcpy(ID2[i],strncpy(ID1[i],ID[i],3));  //截取学号（前3位）到两个数组中
    for (j = 0; j <= n; j++)
    {
        k = j;
        for (i = j + 1; i <= n; i++) //对一个数组进行选择排序
            if (strcmp(ID1[k], ID1[i]) > 0)
                k = i;
        if (k != j)
        {
            strcpy(temp[1], ID1[k]);
            strcpy(ID1[k], ID1[j]);
            strcpy(ID1[j], temp[1]);
        }
    }
    int low, high, mid;
    low = 1;
    high = n + 1;
    i = find = 0;
    do //对排序后的数组进行二分查找
    {
        mid = low + (high - low) / 2;
        if (strcmp(a, ID1[mid - 1]) > 0)
            low = mid + 1;
        else if (strcmp(a, ID1[mid - 1]) < 0)
            high = mid - 1;
        else
        {
            find = 1;
            break;
        }
    } while (high >= low);
    i = mid - 1;
    if (find)
    {
        for (j = 0; j <= n; j++) //将查找结果与顺序未改变的数组比对，得出相应成绩
            if (strcmp(ID1[i], ID2[j]) == 0)
                {
                    for (k = 0; k <= m; k++)
                        printf("Subject %d.%-3d\n", k + 1, Score[j][k]);
                    break;
                }
        for (i = 0; i <= n; i++)
            if (nsum1[j] == nsum[i]) //将查找到的总成绩与排序后的数组比对，得出名次
                printf("名次为第%d\n", i + 1);

    }
    else
        printf("No Such ID\n");
}

void Search2(char a[], int Score[][6], char ID[30][30], int n, int m)
{
    char name[30][30];
    int nsum[n + 1], nsum1[n + 1];
    int i, j, t, sum, k, p;
    int find;
    memset(name, '\0', sizeof(name));
    for (i = 0; i <= n; i++)
        for (j = 0; ID[i][j + 3] != '\0'; j++)
            name[i][j] = ID[i][j + 3]; //截取姓名（将前3位学号删去）
    find = i = 0;
    while (find == 0 && i <= n) //一个一个比对查找姓名，找到则退出
    {
        if (strcmp(a, name[i]) != 0)
            i++;
        else
            find = 1;
    }

    for (t = 0; t <= n; t++)        //将每个学生的总成绩储存到数组中，并备份
    {
        sum = 0;
        for (j = 0; j <= m; j++)
            sum += Score[t][j];
        nsum1[t] = nsum[t] = sum;
    }

    for (t = 0; t <= n; t++)        //将一个储存总成绩的数组进行选择排序（升序）
    {
        k = t;
        for (j = t; j <= n; j++)
            if (nsum[k] < nsum[j])
                k = j;
        if (k != t)
        {
            p = nsum[k];
            nsum[k] = nsum[t];
            nsum[t] = p;
        }
    }

    if (find)
    {
        for (j = 0; j <= m; j++)        //与原成绩数组比对，得到查找的分数
            printf("Subject %d.%-3d\n", j + 1, Score[i][j]);
        for (j = 0; j <= n; j++)
            if (nsum1[i] == nsum[j])
            {
                printf("名次第%d\n", j + 1);    //与排序后的总成绩数组比对，得到名次
                break;
            }
    }
    else
        printf("Not Such ID\n");
}

void Rand_Name(char ID[30][30], int Score[][6], int n, int m)
{
    char name[30][30], name1[30][30];
    memset(name, '\0', sizeof(name));
    memset(name1, '\0', sizeof(name1));
    int i, j;
    for (i = 0; i <= n; i++)
        for (j = 0; ID[i][j + 3] != '\0'; j++)
            name[i][j] = ID[i][j + 3]; //截取姓名
    FactA(name, name1, Score, n, m);
}

void Rand_ID(char ID[30][30], int Score[][6], int n, int m)
{
    char ID1[30][30], ID2[30][30];
    memset(ID1, '\0', sizeof(ID1));
    memset(ID2, '\0', sizeof(ID2));
    int i;
    for (i = 0; i <= n; i++)
        strncpy(ID1[i], ID[i], 3); //截取学号
    FactA(ID1, ID2, Score, n, m);
}

void FactA(char v[][30], char v1[][30], int Score[][6], int n, int m)
{
    int i, j, k;
    int t;
    int Score1[n][m];
    char temp[1][30];
    for (i = 0; i <= n; i++)
        strcpy(v1[i], v[i]);
    for (j = 0; j <= n; j++) //选择排序，升序排列
    {
        k = j;
        for (i = j + 1; i <= n; i++)
            if (strcmp(v[k], v[i]) > 0)
                k = i;
        if (k != j)
        {
            strcpy(temp[1], v[k]);
            strcpy(v[k], v[j]);
            strcpy(v[j], temp[1]);
        }
    }
    for (i = 0; i <= n; i++)
    {
        printf("%s:\n", v[i]);
        for (j = 0; j <= n; j++)
            if (strcmp(v[i], v1[j]) == 0) //与原数组比对，输出相应成绩
            {
                for (t = 0; t <= m; t++)
                    Score1[i][t] = Score[j][t];
                break;
            }
        for (t = 0; t <= m; t++)
            printf("Subject %d.Score = %d\n", t + 1, Score1[i][t]);
    }
    putchar('\n');
}
